############## Funcao para verificar e carregar pacotes do R ###################
#_______________________________________________________________________________
check_and_load_packages <- function(pacotes) {
for (pkg in pacotes) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg, dependencies = TRUE)
}
library(pkg, character.only = TRUE, quietly = TRUE)
}
print("Todos os pacotes foram carregados com sucesso.")
}
#_______________________________________________________________________________
############## FIM DA FUNCAO "func_check_and_load"###########################
# Lista de pacotes necessários para gerar os arquivos KMZ
lista_pacotes <- c("readxl", "dplyr", "sf", "geosphere", "lubridate", "plotKML")
############## Funcao para verificar e carregar pacotes do R ###################
#_______________________________________________________________________________
check_and_load_packages <- function(pacotes) {
for (pkg in pacotes) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg, dependencies = TRUE)
}
library(pkg, character.only = TRUE, quietly = TRUE)
}
print("Todos os pacotes foram carregados com sucesso.")
}
#_______________________________________________________________________________
############## FIM DA FUNCAO "func_check_and_load"###########################
# Lista de pacotes necessários para gerar os arquivos KMZ
lista_pacotes <- c("readxl", "dplyr", "sf", "geosphere", "lubridate", "plotKML")
############## Funcao para verificar e carregar pacotes do R ###################
# Função para instalar pacotes que não estão instalados
instalar_pacotes <- function(pacotes) {
pacotes_nao_instalados <- pacotes[!(pacotes %in% installed.packages()[, "Package"])]
if (length(pacotes_nao_instalados) > 0) {
install.packages(pacotes_nao_instalados, dependencies = TRUE)
}
}
############## FIM DA FUNCAO "func_check_and_load"###########################
# Lista de pacotes necessários para gerar os arquivos KMZ
lista_pacotes <- c("readxl", "dplyr", "sf", "geosphere", "lubridate", "plotKML")
# Caminhos
local_entrada <- "Z:/GEHITE/Principal/0-Gerencial/MAPAS/2025/MAPA2025/SHAPEFILES/Estacoes_2025 SHP"
local_saida <- "Z:/GEHITE/Principal/0-Gerencial/MAPAS/2025/MAPA2025/KMZ_Estacoes"
arquivo_entrada <- "Lista_das_Estacoes_2025_VERSAO-20250410.xlsx"
# Leitura dos dados
dados <- read_excel(file.path(local_entrada, arquivo_entrada))
# Caminhos
local_entrada <- "Z:/GEHITE/Principal/0-Gerencial/MAPAS/2025/MAPA2025/SHAPEFILES/Estacoes_2025 SHP"
local_saida <- "Z:/GEHITE/Principal/0-Gerencial/MAPAS/2025/MAPA2025/KMZ_Estacoes"
arquivo_entrada <- "Lista_das_Estacoes_2025_VERSAO-20250410.xlsx"
# Leitura dos dados
dados <- read_excel(file.path(local_entrada, arquivo_entrada))
# Lista de pacotes necessários para gerar os arquivos KMZ
lista_pacotes <- c("readxl", "dplyr", "sf", "geosphere", "lubridate", "plotKML")
# Instalar pacotes ausentes
instalar_pacotes(lista_pacotes)
# Caminhos
local_entrada <- "Z:/GEHITE/Principal/0-Gerencial/MAPAS/2025/MAPA2025/SHAPEFILES/Estacoes_2025 SHP"
local_saida <- "Z:/GEHITE/Principal/0-Gerencial/MAPAS/2025/MAPA2025/KMZ_Estacoes"
arquivo_entrada <- "Lista_das_Estacoes_2025_VERSAO-20250410.xlsx"
# Leitura dos dados
dados <- read_excel(file.path(local_entrada, arquivo_entrada))
# Lista de pacotes necessários
lista_pacotes <- c("readxl", "dplyr", "sf", "geosphere", "lubridate", "plotKML")
# Instalar pacotes ausentes
instalar_pacotes(lista_pacotes)
instalar_pacotes <- function(pacotes) {
pacotes_nao_instalados <- pacotes[!(pacotes %in% installed.packages()[, "Package"])]
if (length(pacotes_nao_instalados) > 0) {
install.packages(pacotes_nao_instalados, dependencies = TRUE)
}
# Carrega todos os pacotes
sapply(pacotes, require, character.only = TRUE)
}
############## FIM DA FUNÇÃO ##############################################
# Lista de pacotes necessários
lista_pacotes <- c("readxl", "dplyr", "sf", "geosphere", "lubridate", "plotKML")
# Instalar pacotes ausentes
instalar_pacotes(lista_pacotes)
library(plotKML)
# Lista de pacotes necessários
lista_pacotes <- c("readxl", "dplyr", "sf", "geosphere", "lubridate")
# Instalar pacotes ausentes
instalar_pacotes(lista_pacotes)
############## Funcao para verificar e carregar pacotes do R ###################
#_______________________________________________________________________________
check_and_load_packages <- function(pacotes) {
pacotes_nao_instalados <- pacotes[!(pacotes %in% installed.packages()[, "Package"])]
if (length(pacotes_nao_instalados) > 0) {
install.packages(pacotes_nao_instalados, dependencies = TRUE)
}
# Carrega todos os pacotes
sapply(pacotes, require, character.only = TRUE)
}
#_______________________________________________________________________________
############## FIM DA FUNCAO "func_check_and_load"###########################
# Lista de pacotes necessários
lista_pacotes <- c("dplyr", "httr", "lubridate", "openxlsx", "stringr", "tidyr", "XML")
# Chama a função para verificar e carregar os pacotes
check_and_load_packages(lista_pacotes)
search()  # Deve listar pacotes carregados
############## Funcao para verificar e carregar pacotes do R ###################
check_and_load_packages <- function(pacotes) {
pacotes_nao_instalados <- pacotes[!(pacotes %in% installed.packages()[, "Package"])]
if (length(pacotes_nao_instalados) > 0) {
install.packages(pacotes_nao_instalados, dependencies = TRUE)
}
# Carrega todos os pacotes
sapply(pacotes, require, character.only = TRUE)
}
############## FIM DA FUNÇÃO ##############################################
# Lista de pacotes necessários
lista_pacotes <- c("readxl", "dplyr", "sf", "geosphere", "lubridate")
# Instalar pacotes ausentes
check_and_load_packages(lista_pacotes)
# Caminhos
local_entrada <- "Z:/GEHITE/Principal/0-Gerencial/MAPAS/2025/MAPA2025/SHAPEFILES/Estacoes_2025 SHP"
local_saida <- "Z:/GEHITE/Principal/0-Gerencial/MAPAS/2025/MAPA2025/KMZ_Estacoes"
arquivo_entrada <- "Lista_das_Estacoes_2025_VERSAO-20250410.xlsx"
# Leitura dos dados
dados <- read_excel(file.path(local_entrada, arquivo_entrada))
dados
# Função para calcular distância (em metros)
dist_metros <- function(lat1, lon1, lat2, lon2) {
distHaversine(c(lon1, lat1), c(lon2, lat2))
}
# Data de criação
data_criacao <- format(Sys.Date(), "%Y.%m.%d")
data_criacao
# Data de criação
data_criacao <- format(Sys.Date(), "%Y.%m.%d")
# Função para gerar o KMZ de um roteiro específico
gerar_kmz <- function(df, nome_roteiro, local_saida, data_criacao) {
pontos <- list()
for (i in 1:nrow(df)) {
linha <- df[i, ]
nome <- linha$Estacao
has_P <- !is.na(linha$`Latitude PLU`) & !is.na(linha$`Longitude PLU`)
has_F <- !is.na(linha$`Latitude FLU`) & !is.na(linha$`Longitude FLU`)
if (has_P & !has_F) {
pontos[[length(pontos)+1]] <- data.frame(Nome = nome,
Latitude = linha$`Latitude PLU`,
Longitude = linha$`Longitude PLU`)
} else if (!has_P & has_F) {
pontos[[length(pontos)+1]] <- data.frame(Nome = nome,
Latitude = linha$`Latitude FLU`,
Longitude = linha$`Longitude FLU`)
} else if (has_P & has_F) {
dist <- dist_metros(linha$`Latitude PLU`, linha$`Longitude PLU`,
linha$`Latitude FLU`, linha$`Longitude FLU`)
if (dist <= 200) {
pontos[[length(pontos)+1]] <- data.frame(Nome = nome,
Latitude = linha$`Latitude PLU`,
Longitude = linha$`Longitude PLU`)
} else {
pontos[[length(pontos)+1]] <- data.frame(Nome = paste0(nome, " - P"),
Latitude = linha$`Latitude PLU`,
Longitude = linha$`Longitude PLU`)
pontos[[length(pontos)+1]] <- data.frame(Nome = paste0(nome, " - F"),
Latitude = linha$`Latitude FLU`,
Longitude = linha$`Longitude FLU`)
}
}
}
pontos_df <- bind_rows(pontos)
pontos_sf <- st_as_sf(pontos_df, coords = c("Longitude", "Latitude"), crs = 4326)
# Nome do arquivo
nome_arquivo <- paste0("Roteiro_", nome_roteiro, "_", data_criacao, ".kml")
caminho_saida <- file.path(local_saida, nome_arquivo)
# Exporta KMZ
st_write(pontos_sf, caminho_saida, driver = "KML", delete_dsn = TRUE)
}
# Criação dos arquivos por roteiro
roteiros <- unique(dados$Rot)
roteiros_formatados <- sprintf("%02d", roteiros)
roteiros_formatados
for (r in roteiros_formatados) {
dados_r <- dados %>% filter(sprintf("%02d", Rot) == r)
gerar_kmz(dados_r, nome_roteiro = r, local_saida, data_criacao)
}
# Criação do KMZ completo
gerar_kmz(dados, nome_roteiro = "Completo", local_saida, data_criacao)
############## Funcao para verificar e carregar pacotes do R ###################
check_and_load_packages <- function(pacotes) {
pacotes_nao_instalados <- pacotes[!(pacotes %in% installed.packages()[, "Package"])]
if (length(pacotes_nao_instalados) > 0) {
install.packages(pacotes_nao_instalados, dependencies = TRUE)
}
# Carrega todos os pacotes
sapply(pacotes, require, character.only = TRUE)
}
############## FIM DA FUNÇÃO ##############################################
# Lista de pacotes necessários
lista_pacotes <- c("readxl", "dplyr", "sf", "geosphere", "lubridate")
# Instalar pacotes ausentes
check_and_load_packages(lista_pacotes)
# Caminhos
local_entrada <- "Z:/GEHITE/Principal/0-Gerencial/MAPAS/2025/MAPA2025/SHAPEFILES/Estacoes_2025 SHP"
local_saida <- "Z:/GEHITE/Principal/0-Gerencial/MAPAS/2025/MAPA2025/KMZ_Estacoes"
arquivo_entrada <- "Lista_das_Estacoes_2025_VERSAO-20250410.xlsx"
# Leitura dos dados
dados <- read_excel(file.path(local_entrada, arquivo_entrada))
# Função para calcular distância (em metros)
dist_metros <- function(lat1, lon1, lat2, lon2) {
distHaversine(c(lon1, lat1), c(lon2, lat2))
}
# Data de criação
data_criacao <- format(Sys.Date(), "%Y.%m.%d")
# Função para gerar o KMZ de um roteiro específico
gerar_kmz <- function(df, nome_roteiro, local_saida, data_criacao) {
pontos <- list()
for (i in 1:nrow(df)) {
linha <- df[i, ]
nome <- linha$Estacao
has_P <- !is.na(linha$`Latitude PLU`) & !is.na(linha$`Longitude PLU`)
has_F <- !is.na(linha$`Latitude FLU`) & !is.na(linha$`Longitude FLU`)
if (has_P & !has_F) {
pontos[[length(pontos)+1]] <- data.frame(Nome = nome,
Latitude = linha$`Latitude PLU`,
Longitude = linha$`Longitude PLU`)
} else if (!has_P & has_F) {
pontos[[length(pontos)+1]] <- data.frame(Nome = nome,
Latitude = linha$`Latitude FLU`,
Longitude = linha$`Longitude FLU`)
} else if (has_P & has_F) {
dist <- dist_metros(linha$`Latitude PLU`, linha$`Longitude PLU`,
linha$`Latitude FLU`, linha$`Longitude FLU`)
if (dist <= 200) {
pontos[[length(pontos)+1]] <- data.frame(Nome = nome,
Latitude = linha$`Latitude PLU`,
Longitude = linha$`Longitude PLU`)
} else {
pontos[[length(pontos)+1]] <- data.frame(Nome = paste0(nome, " - P"),
Latitude = linha$`Latitude PLU`,
Longitude = linha$`Longitude PLU`)
pontos[[length(pontos)+1]] <- data.frame(Nome = paste0(nome, " - F"),
Latitude = linha$`Latitude FLU`,
Longitude = linha$`Longitude FLU`)
}
}
}
pontos_df <- bind_rows(pontos)
pontos_sf <- st_as_sf(pontos_df, coords = c("Longitude", "Latitude"), crs = 4326)
# Nome do arquivo
nome_arquivo <- paste0("Roteiro_", nome_roteiro, "_", data_criacao, ".kml")
caminho_saida <- file.path(local_saida, nome_arquivo)
# Exporta KMZ
suppressWarnings(
st_write(pontos_sf, caminho_saida, driver = "KML", delete_dsn = TRUE)
)
}
# Criação dos arquivos por roteiro
roteiros <- unique(dados$Rot)
roteiros_formatados <- sprintf("%02d", roteiros)
for (r in roteiros_formatados) {
dados_r <- dados %>% filter(sprintf("%02d", Rot) == r)
gerar_kmz(dados_r, nome_roteiro = r, local_saida, data_criacao)
}
# Criação do KMZ completo
gerar_kmz(dados, nome_roteiro = "Completo", local_saida, data_criacao)
# Caminho da pasta com os arquivos criados
origem_kml <- "Z:/GEHITE/Principal/0-Gerencial/MAPAS/2025/MAPA2025/KMZ_Estacoes"
# Caminho da pasta do repositório GitHub clonado
repo_git <- "Z:/GEHITE/Principal/0-Gerencial/MAPAS/2025/MAPA2025/Roteiros_RHN-2025-kml"
# Copiar os arquivos .kml para a pasta do GitHub
file.copy(
from = list.files(origem_kml, full.names = TRUE, pattern = "\\.kml$"),
to = repo_git,
overwrite = TRUE
)
# Caminho da pasta com os arquivos criados
origem_kml <- "Z:/GEHITE/Principal/0-Gerencial/MAPAS/2025/MAPA2025/KMZ_Estacoes"
# Caminho da pasta com os arquivos criados
origem_kml <- "Z:/GEHITE/Principal/0-Gerencial/MAPAS/2025/MAPA2025/KMZ_Estacoes"
# Caminho da pasta do repositório GitHub clonado
repo_git <- "Z:/GEHITE/Principal/0-Gerencial/MAPAS/2025/MAPA2025/Roteiros_RHN-2025-kml"
# Copiar os arquivos .kml para a pasta do GitHub
file.copy(
from = list.files(origem_kml, full.names = TRUE, pattern = "\\.kml$"),
to = repo_git,
overwrite = TRUE
)
setwd(local_saida)
setwd(local_saida)
system("git add .")
system('git commit -m \"Adiciona arquivos KML dos roteiros\"')
system("git push origin main")
local_saida
setwd(local_saida)
system("git add .")
system('git commit -m \"Atualização automática dos arquivos KML\"')
system("git push origin main")
getwd()
list.files("Z:/GEHITE/Principal/0-Gerencial/MAPAS/2025/MAPA2025/KMZ_Estacoes", all.files = TRUE)
setwd(local_saida)
system("git init")
system("git --version")
# Lista de pacotes necessários
lista_pacotes <- c("readxl", "dplyr", "sf", "geosphere", "lubridate")
# Instalar pacotes ausentes
check_and_load_packages(lista_pacotes)
# Caminhos
local_entrada <- "Z:/GEHITE/Principal/0-Gerencial/MAPAS/2025/MAPA2025/SHAPEFILES/Estacoes_2025 SHP"
local_saida <- "Z:/GEHITE/Principal/0-Gerencial/MAPAS/2025/MAPA2025/KMZ_Estacoes"
# Caminhos
local_entrada <- "Z:/GEHITE/Principal/0-Gerencial/MAPAS/2025/MAPA2025/SHAPEFILES/Estacoes_2025 SHP"
local_saida <- "Z:/GEHITE/Principal/0-Gerencial/MAPAS/2025/MAPA2025/KMZ_Estacoes/Erro"
arquivo_entrada <- "Lista_das_Estacoes_2025_VERSAO-20250410.xlsx"
# Leitura dos dados
dados <- read_excel(file.path(local_entrada, arquivo_entrada))
# Função para calcular distância (em metros)
dist_metros <- function(lat1, lon1, lat2, lon2) {
distHaversine(c(lon1, lat1), c(lon2, lat2))
}
# Data de criação
data_criacao <- format(Sys.Date(), "%Y.%m.%d")
############## Funcao para verificar e carregar pacotes do R ###################
check_and_load_packages <- function(pacotes) {
pacotes_nao_instalados <- pacotes[!(pacotes %in% installed.packages()[, "Package"])]
if (length(pacotes_nao_instalados) > 0) {
install.packages(pacotes_nao_instalados, dependencies = TRUE)
}
# Carrega todos os pacotes
sapply(pacotes, require, character.only = TRUE)
}
############## FIM DA FUNÇÃO ###################################################
# Lista de pacotes necessários
lista_pacotes <- c("readxl", "dplyr", "sf", "geosphere", "lubridate")
# Instalar pacotes ausentes
check_and_load_packages(lista_pacotes)
# Caminhos
local_entrada <- "Z:/GEHITE/Principal/0-Gerencial/MAPAS/2025/MAPA2025/SHAPEFILES/Estacoes_2025 SHP"
local_saida <- "Z:/GEHITE/Principal/0-Gerencial/MAPAS/2025/MAPA2025/KMZ_Estacoes"
arquivo_entrada <- "Lista_das_Estacoes_2025_VERSAO-20250410.xlsx"
# Leitura dos dados
dados <- read_excel(file.path(local_entrada, arquivo_entrada))
# Função para calcular distância (em metros)
dist_metros <- function(lat1, lon1, lat2, lon2) {
distHaversine(c(lon1, lat1), c(lon2, lat2))
}
# Data de criação
data_criacao <- format(Sys.Date(), "%Y.%m.%d")
# Função para gerar o KMZ de um roteiro específico
gerar_kmz <- function(df, nome_roteiro, local_saida, data_criacao) {
pontos <- list()
for (i in 1:nrow(df)) {
linha <- df[i, ]
nome <- linha$Estacao
has_P <- !is.na(linha$`Latitude PLU`) & !is.na(linha$`Longitude PLU`)
has_F <- !is.na(linha$`Latitude FLU`) & !is.na(linha$`Longitude FLU`)
if (has_P & !has_F) {
pontos[[length(pontos)+1]] <- data.frame(Nome = nome,
Latitude = linha$`Latitude PLU`,
Longitude = linha$`Longitude PLU`)
} else if (!has_P & has_F) {
pontos[[length(pontos)+1]] <- data.frame(Nome = nome,
Latitude = linha$`Latitude FLU`,
Longitude = linha$`Longitude FLU`)
} else if (has_P & has_F) {
dist <- dist_metros(linha$`Latitude PLU`, linha$`Longitude PLU`,
linha$`Latitude FLU`, linha$`Longitude FLU`)
if (dist <= 200) {
pontos[[length(pontos)+1]] <- data.frame(Nome = nome,
Latitude = linha$`Latitude PLU`,
Longitude = linha$`Longitude PLU`)
} else {
pontos[[length(pontos)+1]] <- data.frame(Nome = paste0(nome, " - P"),
Latitude = linha$`Latitude PLU`,
Longitude = linha$`Longitude PLU`)
pontos[[length(pontos)+1]] <- data.frame(Nome = paste0(nome, " - F"),
Latitude = linha$`Latitude FLU`,
Longitude = linha$`Longitude FLU`)
}
}
}
pontos_df <- bind_rows(pontos)
pontos_sf <- st_as_sf(pontos_df, coords = c("Longitude", "Latitude"), crs = 4326)
# Nome do arquivo
nome_arquivo <- paste0("Roteiro_", nome_roteiro, "_", data_criacao, ".kml")
caminho_saida <- file.path(local_saida, nome_arquivo)
# Exporta KMZ
suppressWarnings(
st_write(pontos_sf, caminho_saida, driver = "KML", delete_dsn = TRUE)
)
}
# Criação dos arquivos por roteiro
roteiros <- unique(dados$Rot)
roteiros_formatados <- sprintf("%02d", roteiros)
for (r in roteiros_formatados) {
dados_r <- dados %>% filter(sprintf("%02d", Rot) == r)
gerar_kmz(dados_r, nome_roteiro = r, local_saida, data_criacao)
}
# Criação do KMZ completo
gerar_kmz(dados, nome_roteiro = "Completo", local_saida, data_criacao)
################################################################################
#
# Copia dos arquivos no GitHub
#
################################################################################
setwd(local_saida)
# Confirmar se "o sistema de controle de versão do Git / GitHub" está instalado
system("git --version")
# Se a resposta for "127", Git não esta instalado ou o path nao esta definido
# Instalar o Git, conforme
# "Z:\GEHITE\Principal\1-Tecnica\##Instaladores_versao 2024_11(nov)\Outros programas\Git\Instalar_Git.txt
# Se a resposta for algo como "git version 2.43.0.windows.1" esta tudo certo
system("git init")
system("git remote add origin https://github.com/maurocampostrindade/Roteiros_RHN-2025-kml.git")
system("git branch -M main")
system("git add .")
system('git commit -m \"Primeiro envio dos arquivos KML\"')
system("git push -u origin main")
